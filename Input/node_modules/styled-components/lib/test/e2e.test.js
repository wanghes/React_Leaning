'use strict';

var _templateObject = _taggedTemplateLiteral([''], ['']),
    _templateObject2 = _taggedTemplateLiteral(['   \n   '], ['   \\n   ']),
    _templateObject3 = _taggedTemplateLiteral(['\n        ', '\n      '], ['\n        ', '\n      ']),
    _templateObject4 = _taggedTemplateLiteral(['\n        ', '\n        ', '\n      '], ['\n        ', '\n        ', '\n      ']),
    _templateObject5 = _taggedTemplateLiteral(['color: blue;'], ['color: blue;']),
    _templateObject6 = _taggedTemplateLiteral(['color: red;'], ['color: red;']),
    _templateObject7 = _taggedTemplateLiteral(['\n        color: blue;\n        > h1 { font-size: 4rem; }\n      '], ['\n        color: blue;\n        > h1 { font-size: 4rem; }\n      ']),
    _templateObject8 = _taggedTemplateLiteral(['\n        transition: opacity 0.3s;\n      '], ['\n        transition: opacity 0.3s;\n      ']),
    _templateObject9 = _taggedTemplateLiteral(['\n        color: ', ';\n      '], ['\n        color: ', ';\n      ']),
    _templateObject10 = _taggedTemplateLiteral(['\n        background: ', ';\n      '], ['\n        background: ', ';\n      ']);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _expect = require('expect');

var _expect2 = _interopRequireDefault(_expect);

var _enzyme = require('enzyme');

var _ThemeProvider = require('../models/ThemeProvider');

var _ThemeProvider2 = _interopRequireDefault(_ThemeProvider);

var _styled2 = require('../constructors/styled');

var _styled3 = _interopRequireDefault(_styled2);

var _sheet = require('../vendor/glamor/sheet');

var _StyledComponent = require('../models/StyledComponent');

var _StyledComponent2 = _interopRequireDefault(_StyledComponent);

var _ComponentStyle2 = require('../models/ComponentStyle');

var _ComponentStyle3 = _interopRequireDefault(_ComponentStyle2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); } /* eslint-disable no-unused-expressions */
/**
 * This is our end-to-end test suite, which essentially makes sure our public API works the way we
 * promise/want
 */

/* Ignore hashing, just return class names sequentially as .a .b .c etc */
var styled = void 0;
var styleSheet = void 0;
var index = 0;
var classNames = function classNames() {
  return String.fromCodePoint(97 + index++);
};

var toCSS = function toCSS(styleSheet) {
  return styleSheet.rules().map(function (rule) {
    return rule.cssText;
  }).join('\n');
};

describe('e2e', function () {
  /**
   * Make sure the setup is the same for every test
   */
  beforeEach(function () {
    styled = (0, _styled3.default)((0, _StyledComponent2.default)((0, _ComponentStyle3.default)(classNames)));
    if (_sheet.StyleSheet.instance && _sheet.StyleSheet.instance.sheet) _sheet.StyleSheet.instance.flush();
    styleSheet = _sheet.StyleSheet.instance;
    index = 0;
  });

  /**
   * Tests
   */
  describe('basic', function () {
    it('should not throw an error when called', function () {
      styled.div(_templateObject);
    });

    it('should inject a stylesheet when a component is created', function () {
      var Comp = styled.div(_templateObject);
      (0, _enzyme.shallow)(_react2.default.createElement(Comp, null));
      (0, _expect2.default)(styleSheet.injected).toBe(true);
    });

    it('should not generate any styles by default', function () {
      styled.div(_templateObject);
      (0, _expect2.default)(toCSS(styleSheet)).toEqual('');
    });

    it('should generate an empty tag once rendered', function () {
      var Comp = styled.div(_templateObject);
      (0, _enzyme.shallow)(_react2.default.createElement(Comp, null));
      (0, _expect2.default)(toCSS(styleSheet)).toEqual('.a {  }');
    });

    /* TODO: we should probably pretty-format the output so this test might have to change */
    it('should pass through all whitespace', function () {
      var Comp = styled.div(_templateObject2);
      (0, _enzyme.shallow)(_react2.default.createElement(Comp, null));
      (0, _expect2.default)(toCSS(styleSheet)).toEqual('.a {    \n    }');
    });

    it('should inject only once for a styled component, no matter how often it\'s mounted', function () {
      var Comp = styled.div(_templateObject);
      (0, _enzyme.shallow)(_react2.default.createElement(Comp, null));
      (0, _enzyme.shallow)(_react2.default.createElement(Comp, null));
      (0, _expect2.default)(toCSS(styleSheet)).toEqual('.a {  }');
    });
  });

  describe('with styles', function () {
    it('should append a style', function () {
      var rule = 'color: blue;';
      var Comp = styled.div(_templateObject3, rule);
      (0, _enzyme.shallow)(_react2.default.createElement(Comp, null));
      (0, _expect2.default)(toCSS(styleSheet).replace(/\s+/g, ' ')).toEqual('.a { color: blue; }');
    });

    it('should append multiple styles', function () {
      var rule1 = 'color: blue;';
      var rule2 = 'background: red;';
      var Comp = styled.div(_templateObject4, rule1, rule2);
      (0, _enzyme.shallow)(_react2.default.createElement(Comp, null));
      (0, _expect2.default)(toCSS(styleSheet).replace(/\s+/g, ' ')).toEqual('.a { color: blue; background: red; }');
    });

    it('should handle inline style objects', function () {
      var rule1 = {
        backgroundColor: 'blue'
      };
      var Comp = styled.div(_templateObject3, rule1);
      (0, _enzyme.shallow)(_react2.default.createElement(Comp, null));
      (0, _expect2.default)(toCSS(styleSheet).replace(/\s+/g, ' ')).toEqual('.a { background-color: blue; }');
    });

    it('should inject styles of multiple components', function () {
      var firstRule = 'background: blue;';
      var secondRule = 'background: red;';
      var FirstComp = styled.div(_templateObject3, firstRule);
      var SecondComp = styled.div(_templateObject3, secondRule);

      (0, _enzyme.shallow)(_react2.default.createElement(FirstComp, null));
      (0, _enzyme.shallow)(_react2.default.createElement(SecondComp, null));

      (0, _expect2.default)(toCSS(styleSheet).replace(/\s+/g, ' ')).toEqual('.a { background: blue; } .b { background: red; }');
    });

    it('should inject styles of multiple components based on creation, not rendering order', function () {
      var firstRule = 'content: "first rule";';
      var secondRule = 'content: "second rule";';
      var FirstComp = styled.div(_templateObject3, firstRule);
      var SecondComp = styled.div(_templateObject3, secondRule);

      // Switch rendering order, shouldn't change injection order
      (0, _enzyme.shallow)(_react2.default.createElement(SecondComp, null));
      (0, _enzyme.shallow)(_react2.default.createElement(FirstComp, null));

      // Classes _do_ get generated in the order of rendering but that's ok
      (0, _expect2.default)(toCSS(styleSheet).replace(/\s+/g, ' ')).toEqual('\n        .b { content: "first rule"; }\n        .a { content: "second rule"; }\n      '.trim().replace(/\s+/g, ' '));
    });

    it('should strip a JS-style (invalid) comment in the styles', function () {
      var comment = '// This is an invalid comment';
      var rule = 'color: blue;';
      var Comp = styled.div(_templateObject4, comment, rule);
      (0, _enzyme.shallow)(_react2.default.createElement(Comp, null));
      (0, _expect2.default)(toCSS(styleSheet).replace(/\s+/g, ' ')).toEqual('\n        .a {\n          color: blue;\n        }\n      '.trim().replace(/\s+/g, ' '));
    });
  });

  describe('extending', function () {
    it('should generate a single class with no styles', function () {
      var Parent = styled.div(_templateObject);
      var Child = styled(Parent)(_templateObject);

      (0, _enzyme.shallow)(_react2.default.createElement(Parent, null));
      (0, _enzyme.shallow)(_react2.default.createElement(Child, null));

      (0, _expect2.default)(toCSS(styleSheet).trim().replace(/\s+/g, ' ')).toEqual('.a { }');
    });

    it('should generate a single class if only parent has styles', function () {
      var Parent = styled.div(_templateObject5);
      var Child = styled(Parent)(_templateObject);

      (0, _enzyme.shallow)(_react2.default.createElement(Parent, null));
      (0, _enzyme.shallow)(_react2.default.createElement(Child, null));

      (0, _expect2.default)(toCSS(styleSheet).trim().replace(/\s+/g, ' ')).toEqual('.a { color: blue; }');
    });

    it('should generate a single class if only child has styles', function () {
      var Parent = styled.div(_templateObject5);
      var Child = styled(Parent)(_templateObject);

      (0, _enzyme.shallow)(_react2.default.createElement(Parent, null));
      (0, _enzyme.shallow)(_react2.default.createElement(Child, null));

      (0, _expect2.default)(toCSS(styleSheet).trim().replace(/\s+/g, ' ')).toEqual('.a { color: blue; }');
    });

    it('should generate a class for the child with the rules of the parent', function () {
      var Parent = styled.div(_templateObject5);
      var Child = styled(Parent)(_templateObject6);

      (0, _enzyme.shallow)(_react2.default.createElement(Child, null));

      (0, _expect2.default)(toCSS(styleSheet).trim().replace(/\s+/g, ' ')).toEqual('.a { color: blue;color: red; }');
    });

    it('should generate different classes for both parent and child', function () {
      var Parent = styled.div(_templateObject5);
      var Child = styled(Parent)(_templateObject6);

      (0, _enzyme.shallow)(_react2.default.createElement(Parent, null));
      (0, _enzyme.shallow)(_react2.default.createElement(Child, null));

      (0, _expect2.default)(toCSS(styleSheet).trim().replace(/\s+/g, ' ')).toEqual('.a { color: blue; } .b { color: blue;color: red; }');
    });

    it('should copy nested rules to the child', function () {
      var Parent = styled.div(_templateObject7);
      var Child = styled(Parent)(_templateObject6);

      (0, _enzyme.shallow)(_react2.default.createElement(Parent, null));
      (0, _enzyme.shallow)(_react2.default.createElement(Child, null));

      (0, _expect2.default)(toCSS(styleSheet).trim().replace(/\s+/g, ' ')).toEqual('\n        .a { color: blue; }\n        .a > h1 { font-size: 4rem; }\n        .b { color: blue; color: red; }\n        .b > h1 { font-size: 4rem; }\n      '.trim().replace(/\s+/g, ' '));
    });
  });

  describe('prefixes', function () {
    it('should add them in the right order', function () {
      var Comp = styled.div(_templateObject8);
      (0, _enzyme.shallow)(_react2.default.createElement(Comp, null));
      (0, _expect2.default)(toCSS(styleSheet).replace(/\s+/g, ' ')).toEqual('.a { -ms-transition: opacity 0.3s; -moz-transition: opacity 0.3s; -webkit-transition: opacity 0.3s; transition: opacity 0.3s; }');
    });
  });

  describe('props', function () {
    it('should execute interpolations and fall back', function () {
      var Comp = styled.div(_templateObject9, function (props) {
        return props.fg || 'black';
      });
      (0, _enzyme.shallow)(_react2.default.createElement(Comp, null));
      (0, _expect2.default)(toCSS(styleSheet).replace(/\s+/g, ' ')).toEqual('.a { color: black; }');
    });
    it('should execute interpolations and inject props', function () {
      var Comp = styled.div(_templateObject9, function (props) {
        return props.fg || 'black';
      });
      (0, _enzyme.shallow)(_react2.default.createElement(Comp, { fg: 'red' }));
      (0, _expect2.default)(toCSS(styleSheet).replace(/\s+/g, ' ')).toEqual('.a { color: red; }');
    });
  });

  describe('theming', function () {
    it('should inject props.theme into a styled component', function () {
      var Comp = styled.div(_templateObject9, function (props) {
        return props.theme.color;
      });
      var theme = { color: 'black' };
      (0, _enzyme.render)(_react2.default.createElement(
        _ThemeProvider2.default,
        { theme: theme },
        _react2.default.createElement(Comp, null)
      ));
      (0, _expect2.default)(toCSS(styleSheet).replace(/\s+/g, ' ')).toEqual('.a { color: ' + theme.color + '; }');
    });

    it('should inject props.theme into a styled component multiple levels deep', function () {
      var Comp = styled.div(_templateObject9, function (props) {
        return props.theme.color;
      });
      var theme = { color: 'black' };
      (0, _enzyme.render)(_react2.default.createElement(
        _ThemeProvider2.default,
        { theme: theme },
        _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(Comp, null)
          )
        )
      ));
      (0, _expect2.default)(toCSS(styleSheet).replace(/\s+/g, ' ')).toEqual('.a { color: ' + theme.color + '; }');
    });

    it('should only inject props.theme into styled components within its child component tree', function () {
      var Comp1 = styled.div(_templateObject9, function (props) {
        return props.theme.color;
      });
      var Comp2 = styled.div(_templateObject10, function (props) {
        return props.theme.color;
      });
      var theme = { color: 'black' };
      (0, _enzyme.render)(_react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(
          _ThemeProvider2.default,
          { theme: theme },
          _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(Comp1, null)
          )
        ),
        _react2.default.createElement(Comp2, null)
      ));
      (0, _expect2.default)(toCSS(styleSheet).replace(/\s+/g, ' ')).toEqual('.a { color: ' + theme.color + '; } .b { background: ; }');
    });

    it('should inject props.theme into all styled components within the child component tree', function () {
      var Comp1 = styled.div(_templateObject9, function (props) {
        return props.theme.color;
      });
      var Comp2 = styled.div(_templateObject10, function (props) {
        return props.theme.color;
      });
      var theme = { color: 'black' };
      (0, _enzyme.render)(_react2.default.createElement(
        _ThemeProvider2.default,
        { theme: theme },
        _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(Comp1, null)
          ),
          _react2.default.createElement(Comp2, null)
        )
      ));
      (0, _expect2.default)(toCSS(styleSheet).replace(/\s+/g, ' ')).toEqual('.a { color: ' + theme.color + '; } .b { background: ' + theme.color + '; }');
    });

    it('should inject new CSS when the theme changes', function () {
      var Comp = styled.div(_templateObject9, function (props) {
        return props.theme.color;
      });
      var originalTheme = { color: 'black' };
      var newTheme = { color: 'blue' };
      var theme = originalTheme;
      // Force render the component
      var renderComp = function renderComp() {
        (0, _enzyme.render)(_react2.default.createElement(
          _ThemeProvider2.default,
          { theme: theme },
          _react2.default.createElement(Comp, null)
        ));
      };
      renderComp();
      var initialCSS = toCSS(styleSheet).replace(/\s+/g, ' ');
      (0, _expect2.default)(initialCSS).toEqual('.a { color: ' + theme.color + '; }');
      // Change the theme
      theme = newTheme;
      renderComp();
      (0, _expect2.default)(toCSS(styleSheet).replace(/\s+/g, ' ')).toEqual(initialCSS + '.b { color: ' + newTheme.color + '; }');
    });
  });
});